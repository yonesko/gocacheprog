# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job: # This job runs in the build stage, which runs first.
  image: repo.int.tsum.com/tsum/core/golang:1.24.1
  stage: build
  script:
    - go build -o gocacheprog .
  artifacts:
    paths:
      - gocacheprog

unit-test-job: # This job runs in the test stage.
  image: repo.int.tsum.com/tsum/core/golang:1.24.1
  stage: test    # It only starts when the job in the build stage completes successfully.
  services:
    - name: repo.int.tsum.com:443/tsum/core/bitnami/keydb:6.3.4
      alias: keydbhost
      variables:
        ALLOW_EMPTY_PASSWORD: yes
  script:
    - apt-get update
    - apt-get install -y jq
    - apt-get install -y redis-tools
    - go test -race ./...
    - export GOCACHEPROG="./gocacheprog -dir=$(mktemp -d) -log-metrics -r-urls=keydbhost:6379"
    - echo "Warming up cache..."
    - go build -o gocacheprog .
    - echo "Ensure cache is used"
    - go build -o gocacheprog . 2>&1 > log
    - |
      miss=$(log| jq '.gets_miss')
      miss=${miss:-100000}
      if (( miss >= 10 )); then
        echo "❌ Too many get misses"
        exit 1
      else
        echo "✅ Miss count is not high: $miss"
      fi
    - |
      total_commands_processed=`redis-cli -h keydbhost info stats | grep -E "total_commands_processed" | grep -Eo '[0-9]+'`
      total_commands_processed=$(total_commands_processed:-0)
      if (( total_commands_processed <= 100 )); then
        echo "❌ Too little request processed by keydb"
        exit 1
      else
        echo "✅ Request processed count is not low: $total_commands_processed"
      fi

.build_docker: &docker_build_template
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  stage: deploy
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"repo.int.tsum.com\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor --context . --dockerfile $DOCKERFILE --destination $IMAGE:$TAG --cache=true
  only:
    refs:
      - main


push_docker_golang:
  <<: *docker_build_template
  variables:
    IMAGE: repo.int.tsum.com/md/golang
    TAG: v1.24.1
    DOCKERFILE: Dockerfile_golang


push_docker_golangci_lint:
  <<: *docker_build_template
  variables:
    IMAGE: repo.int.tsum.com/md/golangci_lint
    TAG: v2.1.6
    DOCKERFILE: Dockerfile_golangci_lint


